#!/bin/bash

###########################################################################################################
###########################################################################################################
#*/                              INTRODUCTION TO GENOME ASSEMBLY USING VELVET                           /*#
###########################################################################################################
###########################################################################################################

####################
### Activate the working environment
####################

#conda activate EnvVelvet

####################
### Running the pipeline
####################

# in /home/Documents/Bioinformatique/personal_project/ tape: ./notebooks/velvet/script_velvet.sh

####################
### Variable initialization
####################

SITE="https://zenodo.org/record/582600/files"
WORK_DIR="$PWD" # working directory -> absolute way of the current (working) directory
FILES="mutant_R1.fastq mutant_R2.fastq wildtype.fna"
#QUAST_DIR=/home/caujoulat/miniforge3/envs/EnvVelvet/bin

####################
### Data collection
####################
echo "> download the datasets"

if [ ! -d $WORK_DIR/data ]; then
    mkdir "$WORK_DIR/data"
fi 
if [ ! -d $WORK_DIR/data/raw ]; then 
    mkdir "$WORK_DIR/data/raw"
fi
if [ ! -d $WORK_DIR/data/raw/velvet ]; then
    mkdir "$WORK_DIR/data/raw/velvet"
fi

for file in $FILES; do # for loop iterates over a table
    if [ ! -f "$WORK_DIR/data/raw/velvet/$file" ]; then 
        wget -P "$WORK_DIR/data/raw/velvet/" "$SITE/$file"
    fi      
done 

#wget https://zenodo.org/record/582600/files/mutant_R1.fastq
#wget https://zenodo.org/record/582600/files/mutant_R2.fastq
#wget https://zenodo.org/record/582600/files/wildtype.fna

####################
### Quality control of the data
####################
echo "> quality control of the data"

mkdir -p "$WORK_DIR/reports/velvet/QC" # to create all folders recursively

# basename and without the extension
for file in $WORK_DIR/data/raw/velvet/*.fastq; do 
    fastq_file="$(basename $file | sed 's/\.fastq/_fastqc/g')" 
    # takes the last part of the path, so the name of the FASTQ file
    html_file="$WORK_DIR/reports/velvet/QC/$fastq_file.html" 
    # path of the HTML file which will be generated by FASTQC
    zip_file="$WORK_DIR/reports/velvet/QC/$fastq_file.zip" 
    if [[ ! -f "$html_file" ]] || [[ ! -f "$zip_file" ]]; then # || : OR
        fastqc -o "$WORK_DIR/reports/velvet/QC/" "$file"
        #echo "$file, $fastq_file, $html_file, $zip_file"
        #if [[ -f $html_file ]]; then echo "OK html"; else echo "None html"; fi
        #if [[ -f $zip_file ]]; then echo "OK zip"; else echo "None zip"; fi
    fi
done

#fastqc mutant_R1.fastq
#fastqc mutant_R2.fastq

##################
### MultiQC on FASTQ files
##################
echo "> run the multiQC"

mkdir -p "$WORK_DIR/reports/velvet/QC/multiQC"

if [ ! -d $WORK_DIR/reports/velvet/QC/multiQC/multiqc_data ]; then
    multiqc "$WORK_DIR/reports/velvet/QC/" -o "$WORK_DIR/reports/velvet/QC/multiQC"
fi

####################
### Assemble reads with Velvet
####################
echo "> genome assembly"

mkdir -p "$WORK_DIR/data/interm/velvet"

# 1) Interlacer tool:
# Use this link: https://usegalaxy.eu/root?tool_id=fastq_paired_end_interlacer

# 2) velveth
echo "> run velveth"
#velveth ../reports/velvet/. 29 -shortPaired -fastq -interleaved ../data/interm/velvet/fastq_interlacer_PE.fastqsanger
#less Log
#less Roadmaps
#less Sequences

mkdir -p "$WORK_DIR/reports/velvet/assembly"

START=31
END=101
STEP=4

SEQ_COUNT=$(seq $START $STEP $END | wc -l) # gives the number of files we should have
FILE_COUNT=$(ls $WORK_DIR/reports/velvet/assembly/ | wc -w) 
# we do not count the test_kmers we created previously

#echo "$SEQ_COUNT - $FILE_COUNT" 

if [ $FILE_COUNT -ne $SEQ_COUNT ]; then 
    velveth "$WORK_DIR/reports/velvet/assembly/test_k_mers" $START,$END,$STEP -shortPaired -fastq -interleaved \
        "$WORK_DIR/data/interm/velvet/fastq_interlacer_PE.fastqsanger"
fi 

# 3) velvetg
echo "> run velvetg"
#velvetg .
#less contigs.fa
#wc -l stats.txt
#tail -5 stats.txt
#grep -o '>' contigs.fa | wc -l

for folder in $WORK_DIR/reports/velvet/assembly/test_k_mers*; do
    if [ ! -f $folder/contigs.fa ]; then
        cd $folder && velvetg .
        # does not change the global directory of the program (comes directly back to the main folder after 
        # running velvetg): only changes the folder for the velvetg command
        # &&: if the command on the left is successful, executes the command on the right
    fi
done 

# Datamash
echo "> run datamash"
#cat stats.txt | datamash -H mean 2
#cat stats.txt | datamash -H min 2
#cat stats.txt | datamash -H max 2

#####################
### Collect fasta statistics on the contigs
#####################

# Quast
echo "> run quast"

for folder in $WORK_DIR/reports/velvet/assembly/test_k_mers*; do
    test_k_mers="$(basename $folder)" # end of the path with the number of test_kmers_xx
    if [ ! -d "$WORK_DIR/reports/velvet/quast/$test_k_mers" ]; then
        quast "$folder/contigs.fa" \
            -o "$WORK_DIR/reports/velvet/quast/$test_k_mers" \
            -r "$WORK_DIR/data/raw/velvet/wildtype.fna" \
            --contig-thresholds 0,1000
    fi
done

# By default, assume a prokaryotic genome 
# By default, we assume a lower threshold of 500 (lower threshold of contig length)


#!/bin/bash

###########################################################################################################
###########################################################################################################
#*/                              INTRODUCTION TO GENOME ASSEMBLY USING SPADES                           /*#
###########################################################################################################
###########################################################################################################

####################
### Activate the working environment
####################

#conda activate EnvSPAdes

####################
### Running the pipeline
####################

# in /home/Documents/Bioinformatique/personal_project/ tape: ./notebooks/spades/spades_script.sh

####################
### Variable initialization
####################

SITE="https://zenodo.org/record/582600/files" # let's use the same Illumina data as Velvet assembler
WORK_DIR="$PWD" # working directory -> absolute way of the current (working) directory
FILES="mutant_R1.fastq mutant_R2.fastq wildtype.fna"

####################
### Data collection
####################
echo "> download the datasets"

if [ ! -d $WORK_DIR/data ]; then
    mkdir "$WORK_DIR/data"
fi 
if [ ! -d $WORK_DIR/data/raw ]; then 
    mkdir "$WORK_DIR/data/raw"
fi
if [ ! -d $WORK_DIR/data/raw/spades ]; then
    mkdir "$WORK_DIR/data/raw/spades"
fi

for file in $FILES; do # for loop iterates over a table
    if [ ! -f "$WORK_DIR/data/raw/spades/$file" ]; then 
        wget -P "$WORK_DIR/data/raw/spades/" "$SITE/$file"
    fi      
done 

####################
### Quality control of the data
####################
echo "> quality control of the data"

mkdir -p "$WORK_DIR/reports/spades/QC" # to create all folders recursively

# basename and without the extension
for file in $WORK_DIR/data/raw/spades/*.fastq; do 
    fastq_file="$(basename $file | sed 's/\.fastq/_fastqc/g')" 
    # takes the last part of the path, so the name of the FASTQ file
    html_file="$WORK_DIR/reports/spades/QC/$fastq_file.html" 
    # path of the HTML file which will be generated by FASTQC
    zip_file="$WORK_DIR/reports/spades/QC/$fastq_file.zip" 
    if [[ ! -f "$html_file" ]] || [[ ! -f "$zip_file" ]]; then # || : OR
        fastqc -o "$WORK_DIR/reports/spades/QC/" "$file"
        #echo "$file, $fastq_file, $html_file, $zip_file"
        #if [[ -f $html_file ]]; then echo "OK html"; else echo "None html"; fi
        #if [[ -f $zip_file ]]; then echo "OK zip"; else echo "None zip"; fi
    fi
done

#fastqc mutant_R1.fastq
#fastqc mutant_R2.fastq

##################
### MultiQC on FASTQ files
##################
echo "> run the multiQC"

mkdir -p "$WORK_DIR/reports/spades/QC/multiQC"

if [ ! -d $WORK_DIR/reports/spades/QC/multiQC/multiqc_data ]; then
    multiqc "$WORK_DIR/reports/spades/QC/" -o "$WORK_DIR/reports/spades/QC/multiQC"
fi

####################
### Assemble reads with SPAdes
####################
echo "> genome assembly"

mkdir -p "$WORK_DIR/reports/spades/assembly"

if [ ! -f "$WORK_DIR/reports/spades/assembly/spades.log" ]; then
    spades.py -1 "$WORK_DIR/data/raw/spades/mutant_R1.fastq" -2 "$WORK_DIR/data/raw/spades/mutant_R2.fastq" \
        --careful \
        --cov-cutoff auto \
        -o "$WORK_DIR/reports/spades/assembly/"
fi
